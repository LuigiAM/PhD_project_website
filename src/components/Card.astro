---
// This component now accepts an optional 'linkUrl' to make the whole card a link.
type Props = {
  name: string;
  title: string;
  imgSrc: string;
  imgAlt: string;
  expertise?: string;
  linkUrl?: string; // <-- optional prop
}
const { name, title, imgSrc, imgAlt, expertise, linkUrl } = Astro.props;

// Determine whether the root element should be a link (<a>) or a plain div.
const Tag = linkUrl ? 'a' : 'div';
---

<Tag 
  href={linkUrl} target="_blank" rel="noopener noreferrer" class="card-link" aria-label={`View profile for ${name}`}
  class="card" 
  target={linkUrl ? '_blank' : undefined} 
  rel={linkUrl ? 'noopener noreferrer' : undefined}
>
  <img src={imgSrc} alt={imgAlt} class="card-img" />
  <div class="card-content">
    <h3 class="card-name">{name}</h3>
    <p class="card-title">{title}</p>
    {expertise && <p class="card-expertise">{expertise}</p>}
  </div>
</Tag>

<style>
  .card {
    background-color: var(--color-white);
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.07);
    overflow: hidden;
    text-align: center;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    display: block; /* Ensures the card behaves consistently as a block */
    height: 100%; /* Ensures cards in a grid have the same height */

    /* --- styles for link behavior --- */
    text-decoration: none;
    color: inherit; /* Inherits text color from parent */
  }
  /* Only apply hover effect if the card is a link */
  a.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
  }
  .card-img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }
  .card-content {
    padding: 1.5rem;
  }
  .card-name {
    font-size: 1.25rem;
    margin-bottom: 0.25rem;
  }
  .card-title {
    color: var(--color-text-muted);
    font-size: 1rem;
  }
  .card-expertise {
    font-size: 0.875rem;
    font-style: italic;
    margin-top: 0.75rem;
  }
</style>
